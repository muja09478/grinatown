workflows:
  ios_appstore_autosign_grainflow:
    name: iOS App Store – GrainFlow (manual profile)
    max_build_duration: 60

    environment:
      xcode: 16.4
      groups:
        - appstore_connect      # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
        - signing               # CERT_P12 (+ CERT_PASSWORD если есть)
      vars:
        XCODE_PROJECT: "GrainFlow.xcodeproj"
        XCODE_WORKSPACE: "GrainFlow.xcworkspace"   # используется, если есть Podfile
        XCODE_SCHEME: "GrainFlow"
        BUNDLE_ID: "com.GrainFlow.hamzimdin"
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Install dependencies (CocoaPods if present)
        script: |
          set -euo pipefail
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod install
            echo 'BUILD_TARGET=--workspace "GrainFlow.xcworkspace"' >> "$CM_ENV"
          else
            echo 'BUILD_TARGET=--project "GrainFlow.xcodeproj"' >> "$CM_ENV"
          fi

      - name: Bump build number
        script: |
          set -euo pipefail
          agvtool new-version -all "$(date +%y%m%d%H%M)"

      - name: Import Distribution p12 into keychain
        script: |
          set -euo pipefail
          keychain initialize
          echo "$CERT_P12" | base64 --decode > dist.p12
          if [ -n "${CERT_PASSWORD:-}" ]; then
            keychain add-certificates --certificate dist.p12 --certificate-password "$CERT_PASSWORD"
          else
            keychain add-certificates --certificate dist.p12
          fi
          echo "== Code signing identities =="
          security find-identity -v -p codesigning || true
          security find-identity -v -p codesigning | grep -E -q "Apple Distribution|iPhone Distribution" \
            || { echo "ERROR: distribution identity not found in keychain"; exit 1; }

      - name: Ensure App Store provisioning profile for bundle id
        script: |
          set -euo pipefail
          PROFILES_DIR="$CM_BUILD_DIR/profiles"
          mkdir -p "$PROFILES_DIR"

          echo "Fetching IOS_DISTRIBUTION certificate id from portal…"
          CERT_ID=$(app-store-connect certificates list --type IOS_DISTRIBUTION --json \
            | python3 -c 'import sys,json; d=json.load(sys.stdin); items=d["data"] if isinstance(d,dict) and "data" in d else (d if isinstance(d,list) else []); print(next((c.get("id") for c in items if isinstance(c,dict) and "DISTRIBUTION" in ((c.get("attributes",{}) or {}).get("certificateType") or c.get("certificateType") or "").upper()), ""), end="")')
          [ -n "$CERT_ID" ] || { echo "Could not obtain IOS_DISTRIBUTION cert id from portal"; exit 1; }
          echo "Using cert id: $CERT_ID"

          echo "Resolving Bundle ID resource id for ${BUNDLE_ID}…"
          BUNDLE_DBID=$(app-store-connect bundle-ids list --identifier "$BUNDLE_ID" --json \
            | python3 -c 'import sys,json; d=json.load(sys.stdin); items=d["data"] if isinstance(d,dict) and "data" in d else (d if isinstance(d,list) else []); print(next((x.get("id") for x in items if isinstance(x,dict)), ""), end="")')
          [ -n "$BUNDLE_DBID" ] || { echo "Bundle ID ${BUNDLE_ID} not found in Developer portal"; exit 1; }
          echo "Bundle resource id: $BUNDLE_DBID"

          echo "Creating/downloading App Store provisioning profile…"
          set +e
          app-store-connect profiles create \
            --type IOS_APP_STORE \
            --bundle-id "$BUNDLE_ID" \
            --certificate-ids "$CERT_ID" \
            --name "CM_${BUNDLE_ID}_$(date +%Y%m%d%H%M)" \
            --save \
            --profiles-dir "$PROFILES_DIR" 2>create_err.txt
          RET=$?
          if [ $RET -ne 0 ] && grep -q 'unrecognized arguments: --bundle-id' create_err.txt; then
            echo "CLI does not accept --bundle-id, retrying with --bundle-id-id…"
            app-store-connect profiles create \
              --type IOS_APP_STORE \
              --bundle-id-id "$BUNDLE_DBID" \
              --certificate-ids "$CERT_ID" \
              --name "CM_${BUNDLE_ID}_$(date +%Y%m%d%H%M)" \
              --save \
              --profiles-dir "$PROFILES_DIR"
            RET=$?
          fi
          set -e
          [ $RET -eq 0 ] || { echo "Failed to create/download provisioning profile"; cat create_err.txt || true; exit 1; }

          PROFILE_PATH=$(ls -t "$PROFILES_DIR"/*.mobileprovision | head -n1)
          test -s "$PROFILE_PATH"

          PL=$(/usr/bin/security cms -D -i "$PROFILE_PATH")
          UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PL")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PL")
          echo "PROFILE_UUID=$UUID" >> "$CM_ENV"
          echo "TEAM_ID=$TEAM_ID"   >> "$CM_ENV"
          echo "Using profile UUID: $UUID, team: $TEAM_ID"

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp "$PROFILE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

      - name: Build IPA (manual signing)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/GrainFlow.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"

          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </d
