workflows:
  ios_appstore_autosign_grainflow:
    name: iOS App Store – GrainFlow (manual profile)
    max_build_duration: 60

    environment:
      xcode: 16.4
      groups:
        - appstore_connect      # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
        - signing               # CERT_P12 (+ CERT_PASSWORD если есть)
      vars:
        XCODE_PROJECT: "GrainFlow.xcodeproj"
        XCODE_WORKSPACE: "GrainFlow.xcworkspace"   # используется, если есть Podfile
        XCODE_SCHEME: "GrainFlow"
        BUNDLE_ID: "com.GrainFlow.hamzimdin"
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Install dependencies (CocoaPods if present)
        script: |
          set -euo pipefail
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod install
            echo 'BUILD_TARGET=--workspace "GrainFlow.xcworkspace"' >> "$CM_ENV"
          else
            echo 'BUILD_TARGET=--project "GrainFlow.xcodeproj"' >> "$CM_ENV"
          fi

      - name: Bump build number
        script: |
          set -euo pipefail
          agvtool new-version -all "$(date +%y%m%d%H%M)"

      - name: Import Distribution p12 into keychain
        script: |
          set -euo pipefail
          keychain initialize
          echo "$CERT_P12" | base64 --decode > dist.p12
          if [ -n "${CERT_PASSWORD:-}" ]; then
            keychain add-certificates --certificate dist.p12 --certificate-password "$CERT_PASSWORD"
          else
            keychain add-certificates --certificate dist.p12
          fi
          echo "== Code signing identities =="
          security find-identity -v -p codesigning || true
          security find-identity -v -p codesigning | grep -E -q "Apple Distribution|iPhone Distribution" \
            || { echo "ERROR: distribution identity not found in keychain"; exit 1; }

      - name: Ensure App Store provisioning profile for bundle id
        script: |
          set -euo pipefail
          PROFILES_DIR="$CM_BUILD_DIR/profiles"
          mkdir -p "$PROFILES_DIR"

          echo "Fetching IOS_DISTRIBUTION certificate id from portal…"
          CERT_ID=$(app-store-connect certificates list --type IOS_DISTRIBUTION --json | python3 - <<'PY'
import sys, json
d = json.load(sys.stdin)
items = d['data'] if isinstance(d, dict) and 'data' in d else (d if isinstance(d, list) else [])
cid = ''
for c in items:
    if not isinstance(c, dict):
        continue
    a = c.get('attributes', {}) or {}
    t = (a.get('certificateType') or c.get('certificateType') or '').upper()
    if 'DISTRIBUTION' in t:
        cid = c.get('id') or ''
        if cid:
            break
print(cid, end='')
PY
)
          [ -n "$CERT_ID" ] || { echo "Could not obtain IOS_DISTRIBUTION cert id from portal"; exit 1; }
          echo "Using cert id: $CERT_ID"

          echo "Creating/downloading App Store provisioning profile for ${BUNDLE_ID}…"
          # Создаст профиль (если нет) или скачает существующий в PROFILES_DIR
          app-store-connect profiles create \
            --type IOS_APP_STORE \
            --bundle-id "$BUNDLE_ID" \
            --certificate-ids "$CERT_ID" \
            --save \
            --profiles-dir "$PROFILES_DIR" || true

          PROFILE_PATH=$(ls -t "$PROFILES_DIR"/*.mobileprovision | head -n1)
          test -s "$PROFILE_PATH"

          PL=$(/usr/bin/security cms -D -i "$PROFILE_PATH")
          UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PL")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PL")
          echo "PROFILE_UUID=$UUID" >> "$CM_ENV"
          echo "TEAM_ID=$TEAM_ID"   >> "$CM_ENV"
          echo "Using profile UUID: $UUID, team: $TEAM_ID"

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp "$PROFILE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

      - name: Build IPA (manual signing)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/GrainFlow.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"

          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict></plist>
          EOI
          /usr/bin/plutil -lint exportOptions.plist

          xcodebuild -project "$XCODE_PROJECT" -scheme "$XCODE_SCHEME" -configuration Release \
            -archivePath "$ARCHIVE_PATH" archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            COMPILER_INDEX_STORE_ENABLE=NO

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH"

          echo "Exported files:"; ls -lah "$EXPORT_PATH"
          test -e "$EXPORT_PATH"/*.ipa

    artifacts:
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.xcarchive
      - $CM_EXPORT_DIR/*.dSYM.zip
      - ~/Library/Logs/gym/*.log

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
