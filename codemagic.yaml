workflows:
  ios_appstore_autosign_grainflow:
    name: iOS App Store – GrainFlow (manual profile)
    max_build_duration: 60

    environment:
      xcode: 16.4
      groups:
        - appstore_connect
        - signing
      vars:
        XCODE_PROJECT: "GrainFlow.xcodeproj"
        XCODE_WORKSPACE: "GrainFlow.xcworkspace"
        XCODE_SCHEME: "GrainFlow"
        BUNDLE_ID: "com.GrainFlow.hamzimdin"
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Install dependencies (CocoaPods if present)
        script: |
          set -euo pipefail
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod install
            echo 'BUILD_TARGET=--workspace "GrainFlow.xcworkspace"' >> "$CM_ENV"
          else
            echo 'BUILD_TARGET=--project "GrainFlow.xcodeproj"' >> "$CM_ENV"
          fi

      - name: Bump build number
        script: |
          set -euo pipefail
          agvtool new-version -all "$(date +%y%m%d%H%M)"

      - name: Import Distribution p12 into keychain
        script: |
          set -euo pipefail
          keychain initialize
          echo "$CERT_P12" | base64 --decode > dist.p12
          if [ -n "${CERT_PASSWORD:-}" ]; then
            keychain add-certificates --certificate dist.p12 --certificate-password "$CERT_PASSWORD"
          else
            keychain add-certificates --certificate dist.p12
          fi
          echo "== Code signing identities =="
          security find-identity -v -p codesigning || true
          security find-identity -v -p codesigning | grep -E -q "Apple Distribution|iPhone Distribution" \
            || { echo "ERROR: distribution identity not found in keychain"; exit 1; }

      - name: Ensure App Store provisioning profile for bundle id
        script: |
          set -euo pipefail
          PROFILES_DIR="$CM_BUILD_DIR/profiles"
          mkdir -p "$PROFILES_DIR"

          echo "Fetching IOS_DISTRIBUTION certificate id from portal…"
          CERTS_JSON=$(app-store-connect certificates list --type IOS_DISTRIBUTION --json || true)
          case "$(printf '%s' "$CERTS_JSON" | head -c1)" in
            "{"|"[") : ;;
            *) echo "Certificates list not JSON, got:"; echo "$CERTS_JSON"; exit 1 ;;
          esac
          CERT_ID=$(printf '%s' "$CERTS_JSON" | python3 -c 'import sys,json
          d=json.load(sys.stdin)
          items=d["data"] if isinstance(d,dict) and "data" in d else (d if isinstance(d,list) else [])
          cid=""
          for c in items:
              if not isinstance(c,dict): continue
              a=c.get("attributes",{}) or {}
              t=(a.get("certificateType") or c.get("certificateType") or "").upper()
              if "DISTRIBUTION" in t:
                  cid=c.get("id") or ""
                  if cid: break
          print(cid,end="")')
          [ -n "$CERT_ID" ] || { echo "Could not obtain IOS_DISTRIBUTION cert id from portal"; exit 1; }
          echo "Using cert id: $CERT_ID"

          echo "Resolving Bundle ID resource id for ${BUNDLE_ID}…"
          BUNDLES_JSON=$(app-store-connect bundle-ids list --json || true)
          case "$(printf '%s' "$BUNDLES_JSON" | head -c1)" in
            "{"|"[") : ;;
            *) echo "Bundle-ids list not JSON, got:"; echo "$BUNDLES_JSON"; exit 1 ;;
          esac
          BUNDLE_DBID=$(printf '%s' "$BUNDLES_JSON" | BUNDLE_ID="$BUNDLE_ID" python3 -c 'import sys,os,json
          bid=os.environ.get("BUNDLE_ID")
          d=json.load(sys.stdin)
          items=d["data"] if isinstance(d,dict) and "data" in d else (d if isinstance(d,list) else [])
          rid=""
          for x in items:
              if not isinstance(x,dict): continue
              a=x.get("attributes",{}) or {}
              ident=a.get("identifier") or x.get("identifier") or ""
              if ident == bid:
                  rid=x.get("id") or ""
                  if rid: break
          print(rid,end="")')
          [ -n "$BUNDLE_DBID" ] || { echo "Could not find Bundle ID $BUNDLE_ID in portal"; exit 1; }
          echo "Bundle ID resource id: $BUNDLE_DBID"

      - name: Build and export .ipa
        script: |
          set -euo pipefail
          source "$CM_ENV"
          xcode-project build-archive \
            $BUILD_TARGET \
            --scheme "$XCODE_SCHEME" \
            --output "$CM_BUILD_DIR/build/$XCODE_SCHEME.xcarchive"
          xcode-project export-archive \
            --archive-path "$CM_BUILD_DIR/build/$XCODE_SCHEME.xcarchive" \
            --output "$CM_BUILD_DIR/build" \
            --export-method "$EXPORT_METHOD"

      - name: Deploy to App Store Connect
        script: |
          set -euo pipefail
          IPA_PATH=$(find "$CM_BUILD_DIR/build" -name "*.ipa" | head -1)
          [ -n "$IPA_PATH" ] || { echo "No .ipa found in build dir"; exit 1; }
          app-store-connect apps list --json
          app-store-connect upload "$IPA_PATH"
