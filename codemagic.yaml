workflows:
  ios_appstore_autosign_grainflow:
    name: iOS App Store – GrainFlow (manual profile)
    max_build_duration: 60

    environment:
      xcode: 16.4
      groups:
        - appstore_connect      # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
        - signing               # CERT_P12 (+ CERT_PASSWORD если есть)
      vars:
        XCODE_PROJECT: "GrainFlow.xcodeproj"
        XCODE_WORKSPACE: "GrainFlow.xcworkspace"
        XCODE_SCHEME: "GrainFlow"
        BUNDLE_ID: "com.GrainFlow.hamzimdin"
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Install dependencies (CocoaPods if present)
        script: |
          set -euo pipefail
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod install
            echo 'BUILD_TARGET=--workspace "GrainFlow.xcworkspace"' >> "$CM_ENV"
          else
            echo 'BUILD_TARGET=--project "GrainFlow.xcodeproj"' >> "$CM_ENV"
          fi

      - name: Bump build number
        script: |
          set -euo pipefail
          agvtool new-version -all "$(date +%y%m%d%H%M)"

      - name: Import Distribution p12 into keychain
        script: |
          set -euo pipefail
          keychain initialize
          echo "$CERT_P12" | base64 --decode > dist.p12
          if [ -n "${CERT_PASSWORD:-}" ]; then
            keychain add-certificates --certificate dist.p12 --certificate-password "$CERT_PASSWORD"
          else
            keychain add-certificates --certificate dist.p12
          fi
          echo "== Code signing identities =="
          security find-identity -v -p codesigning || true
          security find-identity -v -p codesigning | grep -E -q "Apple Distribution|iPhone Distribution" || { echo "ERROR: distribution identity not found"; exit 1; }

      - name: Ensure App Store provisioning profile for bundle id
        script: |
          set -euo pipefail
          PROFILES_DIR="$CM_BUILD_DIR/profiles"
          mkdir -p "$PROFILES_DIR"

          # Возьмём id активного IOS_DISTRIBUTION-сертификата из портала
          CERT_ID=$(app-store-connect certificates list --type IOS_DISTRIBUTION --json \
            | python3 -c 'import sys,json; d=json.load(sys.stdin); print(next((c["id"] for c in d.get("data",[]) if c.get("attributes",{}).get("certificateType")=="IOS_DISTRIBUTION"), ""), end="")')
          [ -n "$CERT_ID" ] || { echo "No IOS_DISTRIBUTION certificate found in portal"; exit 1; }
          echo "Using cert id: $CERT_ID"

          # Создаст профиль для BUNDLE_ID (если нет) или скачает существующий
          app-store-connect profiles create \
            --type IOS_APP_STORE \
            --bundle-id "$BUNDLE_ID" \
            --certificate-ids "$CERT_ID" \
            --save \
            --profiles-dir "$PROFILES_DIR" || true

          PROFILE_PATH=$(ls -t "$PROFILES_DIR"/*.mobileprovision | head -n1)
          test -s "$PROFILE_PATH"

          PL=$(/usr/bin/security cms -D -i "$PROFILE_PATH")
          UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PL")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PL")
          echo "PROFILE_UUID=$UUID" >> "$CM_ENV"
          echo "TEAM_ID=$TEAM_ID"
