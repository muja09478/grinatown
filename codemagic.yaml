workflows:
  ios_appstore_manual_signing:
    name: iOS App Store Manual signing (GrainFlow)
    max_build_duration: 60

    environment:
      xcode: 16.4
      groups:
        - signing            # см. ниже про переменные
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        XCODE_PROJECT: "GrainFlow.xcodeproj"
        XCODE_SCHEME: "GrainFlow"
        BUNDLE_ID: "com.GrainFlow.hamzimdin"
        TEAM_ID: "OVERRIDE_BY_PROFILE"
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Install dependencies (CocoaPods if present)
        script: |
          set -euo pipefail
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod install
          fi

      - name: Import certificate and provisioning profile
        script: |
          set -euo pipefail

          # --- Подхватываем секреты с разными именами (оба варианта поддержаны) ---
          CERT_P12_B64="${CERTIFICATE_P12:-${CERT_P12:-}}"
          CERT_PWD="${CERTIFICATE_PASSWORD:-${CERT_PASSWORD:-}}"
          PROFILE_B64="${MOBILEPROVISION:-${PROFILE_MOBILEPROVISION:-}}"

          # Проверки с понятными сообщениями
          [ -n "$CERT_P12_B64" ] || { echo "❌ Missing CERTIFICATE_P12 (или CERT_P12) в группе 'signing' — это base64 вашего .p12"; exit 1; }
          [ -n "$PROFILE_B64" ]  || { echo "❌ Missing MOBILEPROVISION (или PROFILE_MOBILEPROVISION) — это base64 вашего .mobileprovision (App Store)"; exit 1; }

          # Files from secrets
          echo "$CERT_P12_B64" | base64 --decode > cert.p12
          echo "$PROFILE_B64"  | base64 --decode > profile.mobileprovision

          # Keychain + certificate
          keychain initialize
          if [ -n "$CERT_PWD" ]; then
            keychain add-certificates --certificate cert.p12 --certificate-password "$CERT_PWD"
          else
            keychain add-certificates --certificate cert.p12
          fi

          # Install profile and extract UUID + TeamIdentifier
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PLIST="$(security cms -D -i profile.mobileprovision)"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PROFILE_PLIST")
          PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST")

          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "Using Provisioning Profile UUID: $PROFILE_UUID"
          echo "TeamIdentifier from profile: $PROFILE_TEAM_ID"

          # export to env for next steps
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"
          echo "TEAM_ID=$PROFILE_TEAM_ID"   >> "$CM_ENV"

          # Resolve correct signing identity (Apple Distribution или iPhone Distribution)
          DIST_IDENTITY=$(security find-identity -v -p codesigning | sed -nE 's/.*"((Apple|iPhone) Distribution:.*)"/\1/p' | head -n1 || true)
          if [ -z "$DIST_IDENTITY" ]; then
            echo "❌ Distribution identity not found in keychain"
            security find-identity -v -p codesigning || true
            exit 1
          fi
          echo "DIST_IDENTITY=$DIST_IDENTITY" >> "$CM_ENV"
          echo "Using signing identity: $DIST_IDENTITY"

          # Diagnostics
          echo "== Code signing identities in keychain =="; security find-identity -v -p codesigning || true

          # exportOptions.plist (manual)
          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict>
          </plist>
          EOI
          /usr/bin/plutil -lint exportOptions.plist

          # Apply profile into the project (manual signing)
          xcode-project use-profiles --project "$XCODE_PROJECT" --export-options-plist exportOptions.plist

      - name: Archive and export IPA (xcodebuild, manual signing)
        script: |
          set -euo pipefail

          ARCHIVE_PATH="$CM_BUILD_DIR/GrainFlow.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"

          echo "Archiving to: $ARCHIVE_PATH"
          xcodebuild \
            -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_IDENTITY="$DIST_IDENTITY" \
            COMPILER_INDEX_STORE_ENABLE=NO

          echo "Exporting IPA to: $EXPORT_PATH"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH"

          echo "Export dir listing:"
          ls -lah "$EXPORT_PATH" || true

          # Fail if no .ipa to avoid 'No artifacts were found'
          test -e "$EXPORT_PATH"/*.ipa

    artifacts:
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_EXPORT_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
